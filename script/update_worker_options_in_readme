#!/usr/bin/env ruby
# encoding: UTF-8

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'image_optim'

README_FILE = File.expand_path('../../README.markdown', __FILE__)
BEGIN_MARKER = '<!---<worker-options>-->'
END_MARKER = '<!---</worker-options>-->'
GENERATED_NOTE = '<!-- markdown for worker options is generated by '\
    "`#{$PROGRAM_NAME}` -->"

def update_worker_options(text)
  marked_reg = /#{Regexp.escape(BEGIN_MARKER)}.*#{Regexp.escape(END_MARKER)}/m
  text.clone.sub!(marked_reg) do
    StringIO.open do |md|
      md.puts BEGIN_MARKER
      md.puts GENERATED_NOTE
      md.puts

      ImageOptim::Worker.klasses.each do |klass|
        md.puts "### :#{klass.bin_sym} =>"
        if klass.option_definitions.empty?
          md.puts 'Worker has no options'
        else
          klass.option_definitions.each do |option_definition|
            md.puts %W[
              *
              `:#{option_definition.name}`
              â€” #{option_definition.description}
              *(defaults to `#{option_definition.default.inspect}`)*
            ].join(' ')
          end
        end
        md.puts
      end

      md.puts END_MARKER

      md.string.strip
    end
  end
end

readme = File.read(README_FILE)
if (readme = update_worker_options(readme))
  File.open(README_FILE, 'w') do |f|
    f.write readme
  end
else
  abort 'Did not update worker options'
end
